// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Staking _$StakingFromJson(Map<String, dynamic> json) => $checkedCreate(
      'Staking',
      json,
      ($checkedConvert) {
        final val = Staking(
          id: $checkedConvert('id', (v) => (v as num?)?.toInt()),
          userId: $checkedConvert('userId', (v) => (v as num?)?.toInt()),
          amount: $checkedConvert('amount', (v) => v as num?),
          currency: $checkedConvert('currency', (v) => v as String?),
          status: $checkedConvert(
              'status',
              (v) => $enumDecodeNullable(_$StakingStatusEnumEnumMap, v,
                  unknownValue: StakingStatusEnum.unknownDefaultOpenApi)),
          applyTime: $checkedConvert('applyTime',
              (v) => v == null ? null : DateTime.parse(v as String)),
          startTime: $checkedConvert('startTime',
              (v) => v == null ? null : DateTime.parse(v as String)),
          endTime: $checkedConvert(
              'endTime', (v) => v == null ? null : DateTime.parse(v as String)),
          earnedRewards: $checkedConvert('earnedRewards', (v) => v as num?),
          unfreezeRequestTime: $checkedConvert('unfreezeRequestTime',
              (v) => v == null ? null : DateTime.parse(v as String)),
          unfreezeCompleteTime: $checkedConvert('unfreezeCompleteTime',
              (v) => v == null ? null : DateTime.parse(v as String)),
          lastSettleDate: $checkedConvert('lastSettleDate',
              (v) => v == null ? null : DateTime.parse(v as String)),
          lastSettleReward:
              $checkedConvert('lastSettleReward', (v) => v as num?),
          remark: $checkedConvert('remark', (v) => v as String?),
        );
        return val;
      },
    );

Map<String, dynamic> _$StakingToJson(Staking instance) => <String, dynamic>{
      if (instance.id case final value?) 'id': value,
      if (instance.userId case final value?) 'userId': value,
      if (instance.amount case final value?) 'amount': value,
      if (instance.currency case final value?) 'currency': value,
      if (_$StakingStatusEnumEnumMap[instance.status] case final value?)
        'status': value,
      if (instance.applyTime?.toIso8601String() case final value?)
        'applyTime': value,
      if (instance.startTime?.toIso8601String() case final value?)
        'startTime': value,
      if (instance.endTime?.toIso8601String() case final value?)
        'endTime': value,
      if (instance.earnedRewards case final value?) 'earnedRewards': value,
      if (instance.unfreezeRequestTime?.toIso8601String() case final value?)
        'unfreezeRequestTime': value,
      if (instance.unfreezeCompleteTime?.toIso8601String() case final value?)
        'unfreezeCompleteTime': value,
      if (instance.lastSettleDate?.toIso8601String() case final value?)
        'lastSettleDate': value,
      if (instance.lastSettleReward case final value?)
        'lastSettleReward': value,
      if (instance.remark case final value?) 'remark': value,
    };

const _$StakingStatusEnumEnumMap = {
  StakingStatusEnum.APPLYING: 'APPLYING',
  StakingStatusEnum.STAKING: 'STAKING',
  StakingStatusEnum.UNSTAKING: 'UNSTAKING',
  StakingStatusEnum.RETURNED: 'RETURNED',
  StakingStatusEnum.unknownDefaultOpenApi: 'unknown_default_open_api',
};
